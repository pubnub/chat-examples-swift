//
//  Authorization.swift
//  Snippets
//
//  Created by Craig Lane on 3/19/19.
//
import XCTest
import PubNub

class Authorization: PNTestCase {

  override func accessManagerEnabled() -> Bool {
    return true
  }

  /**
   * Connecting to PubNub from a client.
   */
  func testConnectToPubNubFromClient() {
    let uuid = UUID().uuidString
    let myAuthKey = "myAuthKey"

    // tag::PAM-7[]
    let configuration = PNConfiguration(publishKey: publishKey,
                                        subscribeKey: subscribeKey)
    configuration.stripMobilePayload = false
    configuration.authKey = myAuthKey // generated by security authority
    configuration.uuid = uuid
    let pubnub = PubNub.clientWithConfiguration(configuration)
    // end::PAM-7[]

    XCTAssertNotNil(pubnub)
    XCTAssertNotNil(pubnub.uuid())
    XCTAssertEqual(pubnub.uuid(), uuid)
  }

  /**
   * Handling "permission denied" errors.
   */
  func testHandlingPermissionDeniedErrors() {
    let expectedChannel = UUID().uuidString
    var pubnub: PubNub! = pubNubClient

    // tag::PAM-8[]
    pubnub.publish()
      .message([
        "senderId": "user123",
        "text": "Hello, hoomans!"
      ])
      // tag::ignore[]
      .channel(expectedChannel)
      /**
       // end::ignore[]
      .channel("room-1")
       // tag::ignore[]
       */
      // end::ignore[]
      .performWithCompletion({ status in
        // tag::ignore[]
        XCTAssertTrue(status.isError)

        // end::ignore[]
        if status.category == .PNAccessDeniedCategory {
          let configuration = pubnub.currentConfiguration()
          configuration.authKey = "my_new_auth_key"

          pubnub.copyWithConfiguration(configuration, completion: { client in
            pubnub = client
            // tag::ignore[]

            XCTAssertEqual(pubnub.currentConfiguration().authKey, "my_new_auth_key")
            // end::ignore[]
          })
        }
      })
    // end::PAM-8[]
  }
}
